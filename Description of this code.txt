Description of this code:

This is a simple and straightforward code that represents the initial phase of the scientific article titled: "Development of an Adaptive Tool Condition Monitoring System: Integration of Case-Based Reasoning with CNN."

The complete and detailed code associated with this article has not yet been fully disclosed to ensure confidentiality and integrity, as it is part of a collaborative project involving the researchers mentioned in the scientific article.

The full release of the code, along with its associated image-based datasets (representing tool wear), will be announced in a few months. This code and its dataset will also be utilized in two other scientific articles currently in development.
Le code commence par monter Google Drive pour accéder aux données situées dans un dossier spécifique (/content/drive/MyDrive/Data_Devided). Les bibliothèques nécessaires sont importées, notamment TensorFlow/Keras pour le traitement des images et la création de modèles CNN, Scikit-learn pour le KNN et les métriques, et Matplotlib/Seaborn pour la visualisation des résultats. Les constantes définissent la taille des images (150x150 pixels), la structure des données (RGB), et le chemin d'accès aux fichiers. Une fonction load_data est utilisée pour charger et prétraiter les données : elle parcourt les dossiers d'entraînement et de test, redimensionne les images, normalise les pixels entre 0 et 1, et attribue une étiquette à chaque image en fonction de son dossier.

Une fois les données chargées, elles sont divisées en ensembles d'entraînement (80 %) et de test (20 %) à l'aide de train_test_split. Le modèle CNN est ensuite défini comme une séquence de couches : plusieurs couches convolutionnelles et de pooling détectent les caractéristiques importantes des images, une couche aplatie (Flatten) transforme les caractéristiques en une seule dimension, et des couches entièrement connectées (Dense) réalisent la classification en quatre classes via une fonction softmax. Le modèle est compilé avec l'optimiseur adam et une fonction de perte adaptée à la classification multi-classes (sparse_categorical_crossentropy). Il est ensuite entraîné sur les données avec validation (20 %) pendant 10 époques, permettant de surveiller les performances sur un ensemble de validation.

Un modèle hybride est défini sous la forme d'une classe HybridModel, qui utilise le CNN pour extraire les caractéristiques des images et le KNN pour classifier ces caractéristiques. La méthode fit entraîne le KNN sur les caractéristiques extraites des données d'entraînement, tandis que la méthode predict prédit les étiquettes des données de test en utilisant les caractéristiques extraites par le CNN. Le modèle hybride est évalué à l'aide de l'exactitude (accuracy_score) et d'une matrice de confusion affichée sous forme de graphique.

Enfin, des courbes d'évolution de l'exactitude et de la perte sont tracées pour analyser les performances du modèle au fil des époques. Le modèle CNN entraîné est enregistré dans Google Drive sous forme de fichier (.h5), prêt à être utilisé pour des prédictions ou partagé sur des plateformes comme GitHub. Ce code offre une solution complète et reproductible pour un problème de classification d'images tout en combinant l'extraction de caractéristiques automatique (via CNN) et l'adaptabilité (via CBR).
